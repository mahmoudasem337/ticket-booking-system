spring.application.name=order-service
# Server configuration
server.port=8084

# Spring datasource configuration
spring.datasource.url=jdbc:mysql://localhost:3306/ticketbookingsystem
spring.datasource.username=springstudent
spring.datasource.password=springstudent

# JPA / Hibernate configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

#inventory-client
inventory.service.url=http://localhost:8081/api/v1/inventory

#booking-client
booking.service.url=http://localhost:8083/api/v1/book


#Kafka Configuration - Fixed for deserialization issues
spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=Bookings
spring.kafka.consumer.group-id=order-service
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.type.mapping=bookingEvent:com.example.common.Booking
spring.kafka.consumer.properties.spring.json.trusted.packages=com.example.common

eureka.client.service-url.defaultZone=http://localhost:8090/eureka
eureka.instance.ip-address=localhost
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true


